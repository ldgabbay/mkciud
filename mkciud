#!/usr/bin/env python3

import sys
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import gzip


SUBTYPE_PREFIX_MAP={
    'cloud-boothook':       '#cloud-boothook\n',
    'cloud-config':         '#cloud-config\n',
    'cloud-config-archive': '#cloud-config-archive\n',
    'part-handler':         '#part-handler\n',
    'upstart-job':          '#upstart-job\n',
    'x-include-once-url':   '#include-once\n',
    'x-include-url':        '#include\n',
    'x-shellscript':        '#!',
}


OPT_SUBTYPE_MAP={
    '-cb':   'cloud-boothook',
    '-cc':   'cloud-config',
    '-cca':  'cloud-config-archive',
    '-ph':   'part-handler',
    '-uj':   'upstart-job',
    '-io':   'x-include-once-url',
    '-i':    'x-include-url',
    '-sh':   'x-shellscript',
}


def fail(message):
    print("{}: {}".format(process_name, message), file=sys.stderr)
    sys.exit(1)


# MIME Multipart messages are encoded in ASCII, so anything else must be base64 encoded

assert len(sys.argv) > 0
multipart_message = MIMEMultipart()
argv = sys.argv.copy()
process_name = argv.pop(0)
while argv:
    arg = argv.pop(0)
    if arg in OPT_SUBTYPE_MAP:
        filename = argv.pop(0)
        with open(filename, 'r') as f:
            message_body = f.read()
        message_subtype = OPT_SUBTYPE_MAP[arg]
    else:
        # detect subtype
        filename = arg
        with open(filename, 'r') as f:
            message_body = f.read()
        message_subtype = None
        for subtype, prefix in SUBTYPE_PREFIX_MAP.items():
            if message_body.startswith(prefix):
                message_subtype = subtype
                break
        if not message_subtype:
            fail("could not determine file type: {}".format(filename))

    assert message_body
    assert message_subtype
    assert message_subtype in SUBTYPE_PREFIX_MAP

    # strip prefix where unnecessary
    prefix = SUBTYPE_PREFIX_MAP[message_subtype]
    if prefix.endswith('\n'):
        message_body = message_body[len(prefix):]

    multipart_message.attach(MIMEText(message_body, message_subtype))

with gzip.GzipFile(fileobj=sys.stdout.buffer, mode='wb') as f:
    f.write(multipart_message.as_bytes())
